import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:provider/provider.dart';
import '../../../../core/layouts/main_layout.dart';
import '../../data/dummy_data/organizations.dart';
import '../../domain/entities/complaint.dart';
import '../../domain/entities/complaint_type.dart';
import '../providers/complaints_provider.dart';
import '../widgets/file_upload_widget.dart';
import 'dart:io';

class CreateComplaintPage extends StatefulWidget {
  final Organization organization;
  final ComplaintType complaintType;

  const CreateComplaintPage({
    super.key,
    required this.organization,
    required this.complaintType,
  });

  @override
  State<CreateComplaintPage> createState() => _CreateComplaintPageState();
}

class _CreateComplaintPageState extends State<CreateComplaintPage> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final List<File> _selectedFiles = [];
  bool _isSubmitting = false;

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _submitComplaint() async {
    if (_formKey.currentState?.validate() ?? false) {
      setState(() => _isSubmitting = true);

      try {
        final complaint = Complaint(
          id: '', // Will be generated by repository
          title: _titleController.text,
          description: _descriptionController.text,
          category: widget.organization.category,
          organization: widget.organization.name,
          status: 'Open',
          createdAt: DateTime.now(),
          attachments: null, // Will be updated after file upload
          type: widget.complaintType,
        );

        await context.read<ComplaintsProvider>().createComplaint(
          complaint,
          attachments: _selectedFiles,
        );

        if (mounted) {
          Navigator.popUntil(
            context,
            (route) => route.isFirst,
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error creating complaint: $e')),
          );
        }
      } finally {
        if (mounted) {
          setState(() => _isSubmitting = false);
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return MainLayout(
      title: widget.complaintType.displayName,
      child: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            _buildOrganizationCard(context),
            const SizedBox(height: 24),
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(
                labelText: 'Title',
                hintText: 'Enter a title for your complaint',
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a title';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(
                labelText: 'Description',
                hintText: 'Provide details about your complaint',
              ),
              maxLines: 5,
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a description';
                }
                return null;
              },
            ),
            const SizedBox(height: 24),
            FileUploadWidget(
              selectedFiles: _selectedFiles,
              onFilesSelected: (files) {
                setState(() {
                  _selectedFiles.clear();
                  _selectedFiles.addAll(files);
                });
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _isSubmitting ? null : _submitComplaint,
              child: _isSubmitting
                  ? const CircularProgressIndicator()
                  : Text('Submit ${widget.complaintType.displayName}'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOrganizationCard(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: widget.complaintType.color.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: FaIcon(
                    widget.complaintType.icon,
                    color: widget.complaintType.color,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        widget.organization.name,
                        style: Theme.of(context).textTheme.titleMedium,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        widget.organization.category,
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
} 